Your ‘todos’ are going to be objects that you’ll want to dynamically create, which means either using factories or 
constructors/classes to generate them.Brainstorm what kind of properties your todo-items are going to have. At a minimum they 
should have a title, description, dueDate and priority. You might also want to include notes or even a checklist.
o   Use FF to set the appropriate properties: title, description, dueDate, priority, notes/checklist.

Your todo list should have projects or separate lists of todos. When a user first opens the app, there should be some sort of 
‘default’ project to which all of their todos are put. Users should be able to create new projects and choose which project 
their todos go into.
o   Create a project function with properties that includes each to-do list.
	- when the project is clicked/activated, filter out that project's todos from array, then style.display them only, hide others.
o   Create another array other than default array that stores all to-dos. 
o   If the project is made and activated/clicked, store all new to-dos to the new project array & render.
o   Advanced level: create tabs to switch views of projects. When a choice is made for the to-do item to be that 
project, then transfer the array element (object) to the other project array; use render to show each to-do to appropriate 
project template (similar to the Library project).

You should separate your application logic (i.e. creating new todos, setting todos as complete, changing todo priority etc.) 
from the DOM-related stuff, so keep all of those things in separate modules.
o   Create new todos: similar to the Library project, create instance of parent function/object/class.
o   Setting todos as complete: as “complete” is “clicked”, keep the DOM element and strike out the entire DOM CSS (z-level: 1; 
put line over the to-do item), but delete the to-do from the appropriate JS project array.

·        Simpler: just remove the todo item from the DOM (array splice).

o   Changing todo priority: change property setting of the project FF/object/class.

The look of the User Interface is up to you, but it should be able to do the following:
view all projects
view all todos in each project (probably just the title and duedate.. perhaps changing color for different priorities)
o   by default in render(), just show title and due date properties to DOM. If object instance stored in render array has 
certain property (stored as property inside FF), then set color accordingly.

expand a single todo to see/edit it’s details
o   When scroll button is clicked, show object property for “notes” - create new div for notes, style.display = "block"

delete a todo
o   Store each instance of to-do inside an array to render to HTML DOM; delete when clicked (forEach in array, if “delete” 
clicked, then remove, etc.)

For inspiration, check out the following great todo apps. (look at screenshots, watch their introduction videos etc.)
Todoist
Things
any.do
Use localStorage to save user’s projects and todos between sessions.